In this project, I regard Village and Cable car as monitors, in which define synchronized functions to be called by queue processes. In this case, the Train class calls functions of Village to send and receive groups, producer and consumer calls the arrive() and departure() function of the CableCar class separately, operator calls descend() and ascend() function to change empty cable carâ€™s position.

In this scenario, trains connect villages and terminus, while terminus, cable car and valley could be viewed as a single place. I found that villages and cable car all need functions to send a group to the next place and receive a group from the previous place, the cable car could be deemed to be a special village, thus I make it extends Village class, which also makes it easier for Train class to regards them as parameters. The receiveGroup() and sentGroup() functions of the CableCar class overrides that in the Village class.

There is a tricky point, which is the group needs to be labelled with whether has finished the trip, otherwise after a group arrived at the terminus, it is very likely to be sent to the cable car to go back down without even visit one village. So I added a boolean variable 'finishTrip' which is default set false, after the group is received by the cable car from the last village, the value is set to true.

I think the most important part of the project is correctly define conditions to judge whether to execute a function and assign correct values afterwards, otherwise the system would not call the process at the correct time. For instance, the arrive() should be proceed only when (the cable car is located at the alley) and (the cable car is not occupied) and (the village0 is not occupied), while the departure() should be proceed when (the cable car is occupied) and (the cable car is located at the valley). When a village or a cable car receives a group, it needs to store the information of the group and transit the occupation situation to true. However when they send a group, the group should be set null and the position of cable car needs to be set to terminus.

In my previous attempts, I called the ascend() function before the descend() function in the Operator class, however the executing result is incorrect since newly arrived groups are not permitted to go up the cable car and visit villages, they are only allowed to enter after the previous group depart. The empty cable car only ascends and descends between the first group departs and the next group arrive. But everything runs alright when I swap the sequence of descending and ascending, which confused me a lot.

The solution generally implemented the requirements successfully, the executing sequence is correct and newly arrived group could join in the correct circumstance.
